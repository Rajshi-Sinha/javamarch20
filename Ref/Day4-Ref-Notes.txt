#day4-OOPS concepts
------------------------------------------------------------

================================================

	-> final keyword
		- final variable
		- final method
		- final class
	-> inner classes 
	-> nested classes
	-> difference between pojo and java beans
	-> naming conventions in java
	-> association / composition with examples 
================================================



==> Classes & Objects
----------------------------

	-> class is user defined data type
	-> class is blueprint of an object 
	-> class defines state/behavior of objects 
	-> an object is an instance of a class 
	-> object is an entity, has particular state/behavior
	-> 

	class <ClassName> {

		//instance members
		//static members

		//constructor

		//instance methods
		//static methods

		//inner class	

		//abstract methods	

	}

	the data and the code to manipulate that data can be written inside a single unit called as 'class'



	===>Encapsulation / Data Hiding 
	-----------------------
		-> the process of binding data and code into a single unit called as Encapsulation
		
		-> binding data and code together 
		-> data hiding 
	
		-> declare all fields as private	
		-> provide public getter/setter methods 
		-> provide appropriate constructors


	===> classes (Beans / Java Beans / POJOs ...)
	--------------------------------------------
		--> single object are called as java beans / beans / pojo

		--> defining java beans / pojo
			--> all properties are private 
			--> no-argument constructor 
			--> public getter/setter methods 
			--> implement 'Serializable/Externalizable interface' .........?


			pojos
			--------
			--> does not extend from any other class
			--> does not have any annotations
				i.e. @Entity
			
		--> every javabean is a pojo, but every pojo is not a javabean
---------------------------------------------------------------------------------

Creating POJOs
--------------------
	-> provide appropriate visibility i.e  private/protected/public/default 
	-> provide appropriate getter / setter
	-> provide appropriate constructor
	-> override toString()
	-> override equals() and hashCode()

==>Constructor
------------------
	-> special method of a class
	-> same name as its class
	-> called automatically when object is created
	-> can be overloaded / parameterized

	-> this()
		-> used to invoke current class overloaded constructors

	-> super()
		-> used to invoke the super class constructor 

		- i.e. 	super()
			super(a, b);

	*=> call to this() / super() must be the first line inside the constructor body
	*=> either we can have call to this() or super()


==> this keyword

	-> this keyword to refer current class instance members
	-> this keyword to pass the current class instance as argument 

		addActionListener(this)
		new Thread(this)

	-> this() constructor 

==> super keyword


==> Method overloading
---------------------------------

- writing multiple functions with same name but diff number/type of parameters 
	- static binding / early binding / compile time binding / compile time polymorphism
		- occurs during compile time 
		- uses Type  information for binding 
	- overloaded methods are bonded using static binding 

	- in overloading, the exact match has always higher priority 
	- in overloading, child class argument will have higher priority than parent class
	- in overloading, the method can have any return type

		byte ---> short ---> int --> long ---> float ----> double 
			  char--->

	=================================================
		automatic promotion in overloading
		ambiguous situations in overloading 
		type casting (up casting)
		super/child class
	===================================================

==> Inheritance
----------------------
	-> Creating a class which derives from another class 
	-> whenever a class inherits another class, it is called inheritance
	-> parent --> chlid
	-> implements IS-A relationship 
	-> in java, using 'extends' keyword we can inherit a class to another class 

	**==> in java, a class can inherit only one class at a time 
			- multiple inheritance is not supported 

	class A {

	}

	class B extends A {

	}


	
	
	
	why inheritance?
	-> Reusability
	-> Maintainability
	-> Extendibility 


	class <ClildClass> extends <ParentClass> {

	}

	-> inheritance creates IS-A relationship between super and sub class 

				Person
				  |
				Employee
				  |
	    ------------------------------
		Trainer					Accountant 

	Employee IS-A Person 
	Trainer IS-A Employee 
	Trainer IS-A Person 

	-> all the members (non-private) of parent, by default they are inherited  to child class
	-> Super class ref var can reference child class object 

		Person p = new Employee();
		Employee e = new Trainer();
		Person p = new Trainer();

		**=> Child class ref variable cannnot reference to Super class object 

	-> private members can not be accessed outside the class

Object class 
-------------------

	**=> Object class in java, is the super most class for all the classes 
	**=> every class in java is implicitely subclass to Object 


						Object	
						  |
		------------------------------------------------------------
		String 		StringBuilder		Arrays		Person 		Car ...

	Object class methods
	-------------------------
			toString()
			equals()
			wait()
			notify()
			notifyAll()





----------------------------------------------------------------------

HAS-A relationshiops
----------------------------------
	-> Aggregation

	-> Composition

	class Address{
		//....street, city, pin, ...
	}

	class Supplier {
		int supplierId;
		String supplierName;
		Address address;
	}

	class Customer {
		int customerId;
		String customerName;
		Address address;
	}


**=> Composition 
		-> strongly associated 

		Univercity has several departments 


**==>Aggregation
		-> loosely associated 

		a Department has sevaral Professors 



	class Address {

	}


	//association ---> HAS-A relationship 

	class Supplier {

		Address add;
	}

	class Customer {

		Address add;
	}

-----------------------------------------------------------------------
	*=> java doesn't support multiple inheritance 
	*=> a class can only extends one class at a time
	*=> a super class ref var can reference to a child object 
---------------------------------------------------------------------------

Polymorphism
-------------------------------------
	-> same interface for multiple tasks
	-> many forms of the same tasks
	-> we can achieve polymorphism by overriding methods
	-> an ref variable might point to diff types at diff times
	-> based on the type of object it is pointing to, it invokes appropriate functionality
	-> this is decided at run-time / runtime polymorphism / runtime binding / dynamic 			binding

	-> Method overriding
	-----------------------
		-> redefining the super class method in sub class is called as 'Method 					overriding'


	abstract class Car {
		public abstract void move();
	}

	class BMW extends Car {
		//override the super class method move()
		public void move(){
		   sysout("car moves fast");
		}
	}

	class Ford extends Car {
		//override the super class method move()
		public void move(){
		   sysout("car moves fast & smooth");
		}
	}


	class Hundai extends Car {
		//must override the abstract methods of the super class

	}


	class Driver {
		public void driveCar(Car car){
			car.move();
		}
	}

	new Driver(new BMW());
	new Driver(new Ford());



Abstract class
--------------------
	-> defined using 'abstract' keyword
	-> abstract class can not be instantiated (we cannot create object of abstract class)
	-> abstract class just acts as a superclass, containing some commong properties/methods for the child classes
	-> abstract class can have constructors/instance methods/static methods/...
	-> the members of abstract class can be public/private/protected 

			abstract class A {

				//no any abstract method

				//you can have 
				// ...constructor
				// ...concrete methods
				//....static methods
				// ...abstract methods
			} 

			abstract class B {
				abstract void method();
			}

			class C extends B{
				//must implement/override all abstract methods of its superclass B
			}


	-> if a class contains abstract method, then the class must be marked as abstract

	abstract class X {
		//instance members
		//static members
		//constructors
		//getter/setters
		//abstract methods
	}

	-> a class who inherits from an abstract class, must override all the abstract methods
	-> abstract classes cannot be instantiated 
	-> 
Abstract Methods
--------------------
	-> defined using 'abstract' keyword and has no body

Interface
-------------------

	-> similar to class

	-> interface is used describe the set of requirements that a class has to implement
	-> whenever an object has multiple is-a relationshiops, we can implement interfaces 
	-> a class, that implements an interface mush override all the abstract methods of that interface

	-> interface  describes only abstract methods
	-> in interface, all the methods are public and abstract

	**=> a class can implement several interfaces 
	**=> an interface can extend several interfaces..
	**=> a ref variable of type interface, can reference to the object of 
			class that implements the interface

why interface?
	-> to have multiple is-a relationships 
	-> it describes set of requirements that a class has to implement 


	interface Taxable{
		//public static final variables;
		//public abstract methods;

		public abstract double calcTax();
	}

	interface Deliverable{
		public abstract void dispatch();
	}

	class TVProduct implements Taxable{
			public double calcTax(){
				//....
			}
	}

	Taxable t = new TVProduct();	//valid


	interface Singer{
		void sing();	//be default, all the methods in interface are public and abstract
	}

	interface Dancer{
		void dance();
	}

	interface Talents extends Singer,Dancer{
		//inherits sing() and dance() both methods from both interfaces
	}

	class TalentedPerson implements Talents{

		public void sing(){
			//....
		}

		public void dance(){
			//....
		}
	}






