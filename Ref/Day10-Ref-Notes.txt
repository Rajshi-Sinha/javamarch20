
==============================

==> explore NIO package

==============================

InputStreamReader and OutputStreamWriter


FileReader and FileWriter


BufferedReader and BufferedWriter



Byte based stream classes
------------------------------------

FileInputStream	and FileOutputStream
	- reads/writes 1 byte at a time 

BufferedInputStream and BufferedOutputStream


DataInputStream and DataOutputStream
--------------------------------------------
	-> these stream classes are called as Formatted Data Stream classes
	-> used to perform read/write operations on primitive data and strings


	.readInt()		.writeInt()
	.readDouble()		.writeDouble()
	.readLine()		.write()
	.readUTF()		.writeUTF()
	.readXXX()		.writeXXX()

ObjectInputStream and ObjectOutputStream
-----------------------------------------------

	-> read/write objects to/from the streams
	*-> the objects must be serializable


*=> Serialization
------------------------------
	-> Serialization is the process of converting an object into sequence of bytes
	-> it converts state of an object into byte stream

			class Employee implements Serializable{

			}

	-> to make an object serializable, we need to implmenet "Serializable" interface

	-> All subtypes of a serializable class are themselves serializable
			i.e. if a parent class has implemeted Serializable interface, then child class doesn't need to implement 
	-> only non-static data members are saved via Serialization
	-> Static and transient data members are not saved via serialization 
	-> constructor of the object is never called during Deserialization
	-> Associated objects must also be Serializable	


	-> Serializable is a "Marker interface"

	**==> marker interface in java do not have any field/methods 
			i.e. Serializable
				  Closable
				  Clonnable
				  ThreadSafe
	**=> Marker interfaces are used to indicate something to the compiler or JVM
	**=> JVM performs some special operations based on the marker interface used on the class 

		class XXXX implements Serializable {

		}

Deserialization
----------------------------
	-> reverse process, convert byte stream into actual java object 


*=>SerialVersionUID
-------------------------------


Externilizable
----------------------
	-> it is subinterface of Serialzable interface 
	-> provides a way to customize how an object is serialzied 

	-> it has two methods		
			void writeExternal(ObjetOutput o)
			void readExternal(ObjectInput i)
	-> if you want to control on how your objects shall be serialized/deserialized, 
			i.e. if you want to ecrypt sensitive data before it is serialized





Multithreading / Multitasking
-------------------------------

	-> executing several tasks simultaneously


	1. process based multitasking



	2. thread based multitasking
		-> executing diff parts of the same process simultaneously
		-> sub process / part 


Thread Scheduler
----------------------
	-> TS is a part of JVM, responsible to schedule the execution of threads


main	t1	t2	t3	t4	t5


Thread Class
-----------------------



How to create a new thread
---------------------------------

	1. by extending Thread class
	
		class MyThread extends Thread{
			//override run() method
			public void run(){
				
				//code
			}

		}

		MyThread mythread1 = new MyThread();
		mythread1.start();

	2. by implementing Runnable interface 

		class MyRunnable implements Runnable {
			
			public void run() {

			}
		}


Thread class constructors
--------------------------------

	new Thread()

	new Thread(Runnable target)

	new Thread(Runnable target, String name)


How to pause a thread
----------------------------

	Thread.sleep(30000);

	*==> you can't pause a thread from another thread
	*==> only the thread itself can pause its execution

	*==> a sleeping thread can be interrupted by another thread


How to interrupt a thread
-----------------------------

	t1.interrupt()

	-> we can stop or resume the execution of a thread 


How to make a thread wait for other thread
-------------------------------------------------







	.start()
	    -> registers the thread with the thread scheduler
	    -> perfoms many other operations
	    -> invokes the run()








