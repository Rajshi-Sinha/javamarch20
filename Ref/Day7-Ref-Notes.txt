
=> equals() and hashCode()
   		
=> Comparable
	-> override 'compareTo(Obejct ob)
	-> specify natural ordering of a custom object 

=> Comparator
	-> override 'compare(Object o1, Object o2)
	-> create external comparators 



*==>contracts
---------------

	1. equality contract 

	2. equals() and hashCode()

	3. equals() and Comparable/Comparator

		=> If two objects are considered equal by the equals operation, then try to 			make those objects must equal by the Comparable or Comparator test.

============================================================

	=> why HashMap allows one null key

	=> how HashMap works internally
============================================================


Set Interface
----------------------
	- subinterface of Collection interface 
	- it models a collection of objects where each element is unique 
		ie. doesn't allow duplicate values 
	**=> HashSet and LinkedHashSet can have one null value
	**=> null values cannot be stored on treeset
	**=> all the implementations of Set are not synchronized


				Collection <-----------add()
				    |
		----------------------------------------------------
		List			Set			Queue
		  |			 |
					 |
			    --------------------------------------------
			    HashSet						TreeSet
				     |
			  LinkedHashSet

HashSet
	- uses 'hashtable' as data structure 
	- doesnt guarantee the order of insertion 
	- it stores information by using a mechanism called hashing. 
		i.e.the informational content of a key is used to determine a unique 			value, called its hash code

LinkedHashSet
	- it uses 'hashtable + double linked list' as data structure 
	- ensures the order of insertion 

TreeSet
	- it uses 'balanced tree' as data structure
	- it maintains sorted order of elements according to their natural ordering

	

Creating a Set
-----------------------

	Set set = new HashSet();
	Set set = new LinkedHashSet();
	Set set = new TreeSet();

	Set<String> namesSet = new HashSet<>();

	Set<String> namesSet = new LinkedHashSet<>();

	Set<String> namesSet = new TreeSet<>();

Basic operations 

	1. adding an element 

		boolean add(Object o)
		boolean addAll(Collection c)

	2. removing an element

		boolean remove(Object o)
			**-> it internally uses equals() method to compare the given 				object with all other objects
			**-> if you have a collection of custom objects i.e. Employee 				etc.make sure that, the equals() and hashCode() 				method implemented correctly

	3. check the set if empty
		
		boolean isEmpty()

	4. iterate over a set collection

	5. Searching an element 

			boolean contains(Object o)


	*=> whenever we use any hashtable based collection, for storing custom objects, make sure you correctly override equals() and hashCode() methods



**=> Even if ArrayList & LinkedList are not synchronized, we can use them in concurrent programs/multithreaded programs**

		using Collections.synchronizedList()

**=> Even if HashSet, LinkedHashSet & Tree are not synchronized, we can use them in concurrent programs/multithreaded programs

		using Collections.synchronizedSet()


equals() and hashCode()
------------------------------
	- override equals() method 
	**=> whenever we override equals() method, we must override the hashCode() as well

	**=> if two objects are equal(according to the implementations of equals() method),
			their hashcode must be equals
	**=> if two objects are not same, there is no constraint on their hashcode, they may be same

	**=> if two objects have identical hashcode, there is no constraint on their equality 

	**=> if two object have diff hashcode, they must not be equal


how HashSet internally works
---------------------------------------
	**=> uses HashMap internally to store objects 

Sorting the collection
---------------------------------

	1. sort a list 

			Collections.sort();


	sort a list of numbers ====> alphanumeric
	sort a list of strings ====> alphabetic
	sort a list of dates ===== chronological 


	**=> Natural ordering is the default ordering of objects of a specific type 
			when they are sorted in array/collection


Comparable interface 
--------------------------
	-> java.util package provides 'Comparable' interface to define natural ordering of a class
	-> to specify the natural ordering, you can implement Comparable interface


		interface Comparable<E>{
			public abstract int compareTo(Object o)
		}

		class Employee implements Comparable{

				//properites
				//constructor
				//getter/setter methods
				//override equals() and hashCode()
				//override toString()

				//override the compareTo() method of comparable interface 
		}

	comparevalue
	--------------------

		>0	: this object is greater than other

		<0	: this object is less than other

	
		=0	: both objects are same

		e1 		e2		e3		e4		e5
	     |		|

		Collections.sort(emplist)
				e1.compareTo(e2)



Comparator interface 
--------------------------
	-> used to create exeternal comparators 

		interface Comparator<E> {
			public abstract int compare(Object o1, Object o2);
		}



		class EmpIdComparator implements Comparator<Employee>{
			//override
			public int compare(Employee e1, Employee e2){
				//logic to compare....
			}
		}


		Set<Employee> empSet = new TreeSet<>(new EmpIdComparator());




		Collection<E> (i)
			|
    ----------------------------------------------------------------
    |				|				|
 List<E> (i)  		      Set<E> (i)		     Queue <E> (i)
    |				|			 	|
ArrayList<E>		    HashSet<E>			-------------------
LinkedList<E>		    LinkedHashSet<E>		|		  |
Vector<E>		    TreeSet<E>		      Deque<E>(i)    BlockingQueue<E>(i)
Stack<E>						|
						    BlockingDeque<E>(i)


	set.add(10);
	set.add(20);
	set.add(10);	---> returns false
	


			Map<K,V> (i)
			   |
			HashMap<K,V>
			LinkedHashMap<K,V>
			TreeMap<K,V>
			HashTable<K,V>



Map<K,V> Interface
-------------------------------

	-> models a collection of objects, stored using key-value pairs 

	-> doesn;t allow duplicate keys 

		name-address
		name-phone
		kin-employee
		isbn-book


	methods of Map<K,V> interface
	--------------------------------

	E put(K key, E element)
		-> adds the given entry in map

	E get(K key)
		- returns the element, that matches the given key

	boolean containsKey(K key)

	boolean containsValue(V value)




	Set<K> keySet()
		- returns a Set containing all the keys from the map 

	Collection<E> values()
		- returns a Collection containing all the values from the map

	Set<Map.Entry<K,V>> entrySet()







Implementation classes of Map interface
------------------------------------------

	1. HashTable<K,V>

		-> doesn;t allow null key
		-> doesn;t maintain order of insertion
		-> uses 'hashtable' datastructure
		-> it is synchronized 
			(all methods in HashTable class are synchronized)
		
	2. HashMap<K,V>

		-> allows one null key
		-> doesn;t maintain order of insertion
		-> uses 'hashtable' data structure

	3. LinkedHashMap<K,V>

		-> allows one null key
		-> maintains order of insertion
		-> uses 'hashtable + double linked list' data structure


	4. TreeMap<K,V>

		-> doesn;t allow null key
		-> maintains sorted order of key, according to their natural ordering 
		-> uses 'red black tree' data structure

		Map<String, String> map = new TreeMap<>();

		Map<Manager, List<Workers>> map = new TreeMap<>();


==> Queue
-------------------

	-> Queue interface models a collection of elements which supports FIFO approach

	-> Queue has a head and tell, new elements are added to the tail, and to-be processed 			elements are picked/removed from the head
	
	-> Deque models a queue collection, but it is double headed

	-> BlockingQueue is a capacity based queue

			Queue<E>
			  |
		   -------------------------
		   |			  |
		 Deque<E>		BlockingQueue<E>
		  |
	     BlockingDeque<E>
		

Implementation classes of Queue
-------------------------------------

	=> General purpose implementations

		LinkedList
			-> maintains order of insertion

		PriorityQueue
			-> maintains sorted order of elements 

		ArrayDeque
			-> double ended queue

	=> Concurrent implementations

		ArrayBlockingQueue
	
		PriorityBlockingQueue

		DelayQueue



Operations of Queues
-------------------------------

	Queue interface methods
	-----------------------------------

	insert		: add(e)		offer(e)

	remove		: remove()		poll()

	examine 	: element()		peek()


	Deque interface methods
	-----------------------------------

	insert		: add(e)		offer(e)
			  addFirst(e)		offerFirst(e)
			  addLast(e)		offerLast(e)	
	

	remove		: remove()		poll()
			  removeLast()		pollLast()
			  removeFirst()		pollFirst()

	examine 	: element()		peek()
			  getFirst()		peekFirst()
			  getLast()		peekLast()

	

	BlockingQueue interface methods
	-----------------------------------

	insert		: add(e)		offer(e)	put(e)

	remove		: remove()		poll()		take(e)

	examine 	: element()		peek()










